plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.3'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'jacoco'
}

group = 'dynamicquad'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // Spring Security
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.security:spring-security-test'

    // JWT
    implementation 'com.auth0:java-jwt:4.4.0'

    // OAuth2
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

    // Database : H2, MySQL
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'com.mysql:mysql-connector-j'

    // lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.4.0'

    // test : JUnit5
    testImplementation 'org.springframework.boot:spring-boot-starter-test'


    // aws s3
    implementation 'com.amazonaws:aws-java-sdk-s3:1.12.676'


    // redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    // test-containers
    testImplementation group: 'org.testcontainers', name: 'testcontainers', version: '1.17.2'
    testImplementation "org.testcontainers:mysql:1.17.2" // mysql 컨테이너를 사용한다면 추가


    // QueryDSL
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // mail
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'com.amazonaws:aws-java-sdk-ses:1.12.408'

    // retry
    implementation 'org.springframework.retry:spring-retry:2.0.10'


    // thymeleaf
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect'

    // actuator
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    runtimeOnly 'io.micrometer:micrometer-registry-prometheus'

    // .env 로드
    implementation 'io.github.cdimascio:dotenv-java:3.0.0'
}

tasks.named('test') {
    useJUnitPlatform()
}

// JaCoCo 설정 (테스트 커버리지 측정)
jacoco {
    toolVersion = "0.8.10"
    reportsDirectory = layout.buildDirectory.dir('reports/jacoco')
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true  // CI 툴 연동용
        html.required = true // 로컬 확인용
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, excludes: ['**/config/**', '**/dto/**', '**/response/**', '**/request/**', '**/global/**', '**/domain/**', '**/model/**'])
            // 특정 패키지 제외
        }))
    }
}